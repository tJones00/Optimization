#
#

import numpy as np, matplotlib.pyplot as plot, pandas as pd
from Rastigrin import *
from scipy.optimized import minimize, differential_evolution
from SALib.sample import saltelli
from SALib.analyze import sobol

# step 1: calculate sensitivities (run this about 1,000 times)

# sobol's method

X_loc = np.random.uniform(low = -20, high = 20, size = 1000)
Y_loc = np.random.uniform(low = -20, high = 20, size = 1000)

# initialize storage arrays:
S1,S2,x1,x2 = [np.zeros((len(X_loc),)) for _ in range(4)]

for n in range(len(X_loc)):
	problem = {'num_vars' : 2, 'names' : ['x','y'],
		   'bounds' : [[-20,20],[-20,20]]}
	print('generating saltelli samples')
	param_values = saltelli.sample(problem,1000)
	Y = np.zeros([param_values.shape[0]])
	for i,X in enumerate(param_values):	
		Y[i] = Rastigrin(X)	
	Si = sobol.analyze(problem,Y)
	S1[n] = Si['ST'][0]
	S2[n] = Si['ST'][1]
	
	# now lets compute a local derivative:
	xi,yi = X_loc[n],Y_loc[n]
	px = np.random.uniform(low=-1,high=1,size = 2)
	x1[n],x2[n] = dRastigrin([xi,yi],px)	



